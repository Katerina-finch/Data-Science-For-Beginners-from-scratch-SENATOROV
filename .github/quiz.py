"""GitHub."""

# 1.1. Что такое GitHub?
# 1.2. Как GitHub связан с Git?
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
# 1.4. Зачем нужны и как работают pull requests?
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
# 1.6 Какая команда генерирует SSH ключ для Доступа по SSH к репозиторию (Рисунок 83)

# 1.1. GitHub — это веб-сервис для хостинга и управления проектами, использующими систему контроля версий
# Git. Он позволяет разработчикам хранить, отслеживать изменения в коде, работать над проектами совместно
# с другими пользователями и организовывать их по репозиториям. GitHub поддерживает создание
# «пулл-реквестов» (предложений изменений), которые позволяют другим разработчикам просматривать и
# комментировать код до его слияния с основной веткой проекта.
#
# 1.2. Git используется для работы с репозиториями на моем компьютере. Когда я хочу загрузить изменения
# на GitHub или получить обновления, я использую команды git push и git pull соответственно.
# GitHub - это удалённое хранилище, где можно публиковать репозитории Git. Можно создавать репозитории на
# GitHub и синхронизировать их с локальными репозиториями через Git.
#
# 1.3. Fork — это создание копии репозитория на вашем аккаунте GitHub. Это позволяет вам работать с проектом,
# не затрагивая основной репозиторий. Fork создаёт независимую копию репозитория, которая остается связанной
# с оригиналом, и вы можете предложить изменения (через pull request) обратно в оригинальный проект.
# Clone — это создание локальной копии репозитория на вашем компьютере. Когда вы клонируете репозиторий,
# вы получаете его точную копию на своём устройстве и можете работать с ним локально. Клонирование
# подразумевает, что у вас есть доступ к оригинальному репозиторию
#
# 1.4. Pull requests — это важный инструмент для упорядоченной, эффективной и безопасной работы с кодом,
# особенно в больших проектах с несколькими участниками. Они помогают улучшить качество кода, упрощают
# совместную работу и позволяют вносить изменения в код, а также следить за этими изменениями перед
# его окончательным слиянием.
#
# 1.5. Да, GitHub использует ваш почтовый адрес для привязки ваших Git-коммитов к вашей учётной записи
# на GitHub. Это важно для того, чтобы GitHub мог правильно ассоциировать ваши изменения с вашей профилем.
#
# 1.6. ssh-keygen -t rsa -b 4096 -C "ваш_email"
# ssh-keygen — это утилита для создания SSH-ключей.
# -t rsa — указывает тип ключа, в данном случае это RSA. RSA — это алгоритм, используемый для создания
# пары ключей.
# -b 4096 — задаёт размер ключа (в битах). Рекомендуется использовать размер 4096 бит для большей безопасности.
# -C "ваш_email" — добавляет комментарий, обычно это ваш email, который помогает идентифицировать ключ.
#

# Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
#
# 1. Форк репозитория: Для начала сделайте форк репозитория, в который вы хотите внести изменения.
# Это создаст копию репозитория на вашем аккаунте.
# 2. Клонирование репозитория: Клонируйте форкнутый репозиторий на свою локальную машину для работы
# с ним.
# 3. Создание новой ветки: Создайте новую ветку для вашего изменения. Это помогает работать над фичей
# или исправлением, не затрагивая основную ветку (например, main).
# 4. Внесение изменений: Внесите нужные изменения в код или документацию.
# 5. Тестирование изменений: Протестируйте изменения локально, чтобы убедиться, что все работает
# корректно и не ломает других частей проекта.
# 6. Коммит изменений: Зафиксируйте изменения с правильным сообщением. Убедитесь, что ваши коммиты
# чистые и логичные.
# 7. Отправка изменений в форк: Отправьте (push) изменения в вашу ветку на GitHub.
# 8. Создание Pull Request (PR): Откройте пул реквест, чтобы предложить свои изменения владельцам
# основного репозитория. Убедитесь, что описали изменения в PR и ссылаетесь на соответствующие
# issues, если они существуют.

# 3.1. Какие практики принято соблюдать при создании Pull Request, чтобы закрыть автоматический issues?
#
# Чтобы автоматически закрыть issues при создании Pull Request, необходимо соблюдать несколько правил:
#
#     В титуле PR укажите номер issue с префиксом #, например: Fix issue #123 или Resolve #456.
#     В описании PR добавьте ссылку на issue и добавьте фразу Closes #123 или Fixes #456, что
# 				автоматически закроет этот issue, когда PR будет принят.
#
# Пример описания PR:
#
# Closes #123: Исправлена ошибка в обработке данных.
#
# Практики при создании commit, чтобы закрыть автоматический issues:
#
# При создании коммита нужно:
#
#     В сообщении коммита указывать, что коммит решает проблему, например, Fixes #123 или
# 				 Closes #456.
#     Сообщение коммита должно быть кратким и точным, описывая, какое исправление или улучшение
# 				вносится в проект.
#
# Пример сообщения коммита:
#
# Fixes #123: Исправлена ошибка при загрузке данных.
#
#

# 3.2. Как отклонить/закрыть пул реквест?
#
# Чтобы отклонить или закрыть пул реквест в GitHub, выполните следующие действия:
#
# 1. Перейдите на страницу пул реквеста.
# 2. На правой панели будет кнопка Close pull request (Закрыть пул реквест).
# 3. Нажмите на эту кнопку, и пул реквест будет закрыт.

# 3.3. Нужно ли создавать ишьюс перед отправкой пул реквеста?
#
# Создание issue помогает четко обозначить проблему или задачу, которую вы решаете, и дает возможность
# обсуждать решение с другими участниками проекта.
# Если ваш пул реквест решает конкретную проблему или добавляет новую функцию, создание issue до PR
# может улучшить прозрачность процесса.
# Создание issue рекомендуется

# 3.4. В какой вкладке можно посмотреть список изменений, который был в пул реквесте?
#
# Чтобы просмотреть список изменений в пул реквесте, откройте вкладку "Files changed" (Измененные файлы)
# на странице
# пул реквеста. Здесь вы увидите, какие строки были добавлены или удалены в файлах, а также все
# изменения, которые были внесены в код.

# 3.5. В какой вкладке находится страница обсуждений пул реквеста?
#
# Страница обсуждений пул реквеста находится во вкладке "Conversation" (Обсуждения).
# Эта вкладка показывает все комментарии, обсуждения и отзывы по пул реквесту, включая
#  реакции других участников проекта, статус проверки и результаты тестов.
#

# 4. Создание запроса на слияние
# 4.1 Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
#
# Нет, пул реквест (PR) можно открыть только в том случае, если в вашем форке были изменения,
# которые вы хотите внести в оригинальный репозиторий. Если вы не внесли никаких изменений,
# GitHub не позволит вам создать пул реквест, потому что сравнивать будет нечего.
# 4.2 Что нужно сделать, чтобы открыть пул реквест? (Рисунок 90)
#
# Чтобы открыть пул реквест, выполните следующие шаги:
#
#     Сделайте изменения в вашей ветке или форке.
#     Перейдите на страницу репозитория, в который хотите внести изменения (оригинальный репозиторий).
#     Нажмите на вкладку Pull Requests.
#     Нажмите на кнопку New Pull Request.
#     Выберите вашу ветку в форке и ветку, с которой хотите сделать слияние.
#     Введите название и описание пул реквеста.
#     Нажмите на кнопку Create Pull Request.
#
# 4.3 Что нужно сделать, если ваш Форк устарел?
#
# Если ваш форк устарел и отстает от оригинального репозитория, вам нужно его синхронизировать.
#
# В настройках вашего форка добавьте оригинальный репозиторий как upstream (если он еще не добавлен).
# Перейдите в вашу локальную копию репозитория и выполните команду для получения изменений:
#
# git remote add upstream https://github.com/SENATOROVAI/intro-cs/issues/8
# git fetch upstream
#
# Переключитесь на свою основную ветку:
#
# git checkout main
#
# Слейте изменения из оригинального репозитория:
#
# git merge upstream/main
#
# Разрешите возможные конфликты и отправьте изменения обратно в ваш форк:
#
# git push origin main

# 5. Отрывки кода
# 5.1 Что нужно сделать для добавления отрывка кода в комментарии к ишьюсу? (Рисунок 104)
# Если вы отвечаете только на часть большого комментария, то можно цитировать только
# выбранную часть, предваряя её символом >. Это настолько часто используется, что даже
# существует комбинация клавиш для этого. Если в комментарии выделить текст, на который
# вы собираетесь ответить, и нажать клавишу r, то выделенный текст будет включён как
# цитата в ваш комментарий.
# Либо можно использовать обратные кавычки (`):
#
# Для однострочного кода используйте одну пару обратных кавычек: `код`
# Для многострочного кода используйте тройные обратные кавычки: ``` код ```
#
# 5.2 На какую клавишу нажать, чтобы выделенный текст был включён как цитата в ваш комментарий? (Рисунок 105)
#
# Для того чтобы выделить текст как цитату в комментарии, используйте клавишу > перед текстом. Например:
#
# > Это цитата
#
# 5.3 Как вставить картинку в ишьюс? (Рисунок 108)
#
# Чтобы вставить картинку в ишьюс, используйте Markdown синтаксис:
#
# ![alt text](URL_картинки)
#
# Просто замените URL_картинки на ссылку на вашу картинку. Картинка будет отображена в комментарии
#  или описании.

# 6. Поддержание GitHub репозитория в актуальном состоянии
# 6.1 Как понять, что ваш форк устарел?
# На странице вашего форка будет кнопка "Fetch upstream", если ваш форк отстает от
# оригинального репозитория.
#
# 6.2 Как обновить форк?
#
# Для обновления форка выполните следующие шаги:
#
#     Добавьте оригинальный репозиторий как upstream:
#
# git remote add upstream https://github.com/SENATOROVAI/intro-cs/issues/8
#
# Получите изменения из оригинального репозитория:
#
# git fetch upstream
#
# Слейте изменения в вашу ветку:
#
# git merge upstream/main
#
# Пушьте изменения обратно в ваш форк:
#
# git push origin main

# 7. Добавление участников
# 7.1 Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием?
# (Рисунок 112)
#
# Чтобы добавить участников в ваш репозиторий:
#
# 1. Перейдите на страницу репозитория на GitHub.
# 2. Нажмите на вкладку Settings.
# 3. В левой части экрана выберите Manage access.
# 4. Нажмите на кнопку Invite a collaborator.
# 5. Введите (выберите) имя пользователя и отправьте приглашение.

# 8. Упоминания и уведомления
# 8.1 Какой символ нужен для упоминания кого-либо? (Рисунок 118)
#
# Для упоминания пользователя в комментариях или сообщениях на GitHub используйте символ @. Например,
# чтобы упомянуть пользователя username, пишите @username.
# 8.2 Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
#
# Центр уведомлений можно найти в правом верхнем углу на GitHub. Это иконка колокольчика. Для
# перехода на страницу уведомлений можно использовать следующий путь:
#
#     Перейдите в правый верхний угол и нажмите на иконку колокольчика.
#     Также ссылку можно получить, перейдя по следующей ссылке: https://github.com/notifications

# 9. Особенные файлы
# 9.1 Что такое и зачем нужен файл README?
#
# Файл README.md — это документ, который описывает проект, его цели, как установить, использовать и
# вносить изменения. Он необходим для того, чтобы другие разработчики могли легко понять, как
# работать с проектом.
# 9.2 Что такое и зачем нужен файл CONTRIBUTING?
#
# Файл CONTRIBUTING.md — это файл, который содержит инструкции о том, как можно внести вклад
# в проект. Обычно в нем объясняется, как создавать issues, пул реквесты и как придерживаться
# стандартов кода.

# 10. Управление проектом
# 10.1 Как изменить основную ветку? (Рисунок 123)
#
# Чтобы изменить основную ветку:
#
# 1. Перейдите в Settings репозитория.
# 2. В разделе Branches выберите основную ветку.
# 3. В разделе Default branch нажмите Change default branch и выберите новую основную ветку.
#
# 10.2 Как передать проект? Какая кнопка? (Рисунок 124)
#
# Чтобы передать проект другому пользователю, перейдите в Settings репозитория, прокрутите вниз
# и нажмите Transfer в разделе Danger Zone. Следуйте инструкциям, чтобы передать репозиторий.
#
# 10.3 Что такое файл .gitignore?
#
# Файл .gitignore используется для исключения из индексации Git файлов и директорий, которые
# не должны попасть в репозиторий, таких как лог-файлы, конфиденциальные данные, сборки и
# другие временные файлы.
